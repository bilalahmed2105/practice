{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter first value : 2\n",
      "enter second value : 5\n",
      "enter opertaor : ^\n",
      "2 ^ 5 = 32\n"
     ]
    }
   ],
   "source": [
    "# MUHAMMAD BILAL\n",
    "# ROLL NO. PY02222\n",
    "# Q no 1\n",
    "val_1 = int(input(\"enter first value : \"))\n",
    "val_2 = int(input(\"enter second value : \"))\n",
    "operator = input (\"enter opertaor : \")\n",
    "if operator == \"+\":\n",
    "    print (val_1 + val_2)\n",
    "elif operator == \"-\":\n",
    "    print (val_1 , \"-\" , val_2 ,\"=\" , val_1 - val_2)\n",
    "elif operator == \"*\":\n",
    "    print (val_1 , \"*\" , val_2 ,\"=\",val_1 * val_2)\n",
    "elif operator == \"/\":\n",
    "    print (val_1 , \"/\" , val_2 ,\"=\",val_1 / val_2)\n",
    "elif operator == \"^\":\n",
    "    print (val_1 , \"^\" , val_2 ,\"=\",val_1 ** val_2)\n",
    "else :\n",
    "    print(\"enter corrector operator\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "given number bilal is not present in list\n",
      "given number ali is not present in list\n",
      "given number ubaid is not present in list\n",
      "given number 1 is not present in list\n",
      "given number 3 is not present in list\n",
      "given number 5 is not present in list\n",
      "given number 5 is not present in list\n",
      "given number 55 is present in list\n"
     ]
    }
   ],
   "source": [
    "# Q NO. 2\n",
    "lst = [\"bilal\",\"ali\",\"ubaid\",1,3,5,5,55,45,53,34,62,425,3,35, 5 ,34 , \"PIAIC\", \"saylani\" ]\n",
    "for val in lst:\n",
    "    if val == 55:\n",
    "        print (\"given number\",val, \"is present in list\")\n",
    "        break       \n",
    "    else:\n",
    "        print (\"given number\",val, \"is not present in list\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'muhammad bilal', 'father_name': 'aqeel ahmed', 'class': 'B.E', 'roll no.': 'PY02222', 'language': 'python'}\n"
     ]
    }
   ],
   "source": [
    "# Q NO 3\n",
    "student ={\"name\":\"muhammad bilal\",\"father_name\":\"aqeel ahmed\",\"class\":\"B.E\",\"roll no.\":\"PY02222\"}\n",
    "student[\"language\"]= \"python\"\n",
    "print (student)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150\n"
     ]
    }
   ],
   "source": [
    "# Q NO. 4\n",
    "data = {'a':10,'b':20,'c':30,'d':40,'e':50,}\n",
    "print(sum(data.values()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "20\n",
      "30\n",
      "40\n",
      "46\n",
      "50\n"
     ]
    }
   ],
   "source": [
    "# Q NO. 5\n",
    "my_list = [20,30,20,30,40,50,43,46,46,87,15,11,40,50,15]\n",
    "my_list.sort()\n",
    "for i in range (len (my_list) -1):\n",
    "    if my_list[i] == my_list[i+1]:\n",
    "        print (my_list[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key not found\n",
      "key already found\n"
     ]
    }
   ],
   "source": [
    "# Q NO. 6\n",
    "dictionary ={\"name\":\"bilal\",\"gender\":\"male\",\"martial_status\":\"single\",\"profession\":\"engineer\"}\n",
    "for each_key in dictionary.keys():\n",
    "    \n",
    "    if each_key == \"gender\":\n",
    "        print (\"key already found\")\n",
    "        break\n",
    "    else :\n",
    "        print(\"key not found\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
